generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FAQ {
  id         Int      @id @default(autoincrement())
  question   String
  answer     String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model advisor {
  id              Int               @id
  emp_id          String            @db.VarChar(20)
  batch_id        Int?
  start_time      DateTime?         @db.Timestamp(6)
  end_time        DateTime?         @db.Timestamp(6)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  batch           batch?            @relation(fields: [batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee        employee          @relation(fields: [emp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  advisor_request advisor_request[]
}

model advisor_request {
  id           Int       @id @default(autoincrement())
  student_id   String    @db.VarChar(20)
  advisor_id   Int
  booking_date DateTime? @db.Date
  start_time   DateTime? @db.Timestamp(6)
  end_time     DateTime? @db.Timestamp(6)
  description  String?
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  advisor      advisor   @relation(fields: [advisor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student      student   @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model assignment {
  id                    Int                     @id @default(autoincrement())
  section_id            Int
  title                 String                  @db.VarChar(100)
  description           String?
  start_date            DateTime?               @db.Timestamp(6)
  end_date              DateTime?               @db.Timestamp(6)
  create_at             DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  section               section                 @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignment_submission assignment_submission[]
}

model assignment_submission {
  id            Int        @id @default(autoincrement())
  assignment_id Int
  student_id    String     @db.VarChar(20)
  file_path     String?    @db.VarChar(255)
  feedback      String?
  create_at     DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  assignment    assignment @relation(fields: [assignment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student       student    @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model attachment {
  material_id    Int
  file_path      String?        @db.VarChar(255)
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  updated_at     DateTime       @default(now()) @db.Timestamp(6)
  id             Int            @id @default(autoincrement())
  class_material class_material @relation(fields: [material_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model attendance_qr_code {
  id           Int                   @id @default(autoincrement())
  section_id   Int
  professor_id Int
  qrcode       String?               @db.VarChar(255)
  location     Unsupported("point")?
  start_at     DateTime?             @db.Timestamp(6)
  end_at       DateTime?             @db.Timestamp(6)
  created_at   DateTime              @default(now()) @db.Timestamp(6)
  updated_at   DateTime              @default(now()) @db.Timestamp(6)
  professor    professor             @relation(fields: [professor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  section      section               @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model batch {
  id         Int       @id @default(autoincrement())
  batch_name String    @unique @db.VarChar(20)
  program_id Int
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  advisor    advisor[]
  program    program   @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student    student[]
}

model book {
  id               Int                @id @default(autoincrement())
  category_id      Int
  status           Boolean?           @default(true)
  isbn             String             @unique @db.VarChar(20)
  title            String             @db.VarChar(100)
  edition          Int?
  author           String?            @db.VarChar(100)
  publisher        String?            @db.VarChar(100)
  publish_date     DateTime?          @db.Date
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  category         category           @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  book_reservation book_reservation[]
}

model book_reservation {
  id         Int                           @id @default(autoincrement())
  status     book_reservation_status_enum?
  user_id    Int
  book_id    Int
  start_date DateTime?                     @db.Date
  end_date   DateTime?                     @db.Date
  created_at DateTime                      @default(now()) @db.Timestamp(6)
  updated_at DateTime                      @default(now()) @db.Timestamp(6)
  book       book                          @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user                          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model building {
  id           Int         @id @default(autoincrement())
  campus_id    Int?
  name         String      @db.VarChar(100)
  building_img String?     @db.VarChar(255)
  phone        String?     @db.VarChar(20)
  fax          String?     @db.VarChar(20)
  location     String?     @db.VarChar(255)
  campus       campus?     @relation(fields: [campus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  complaint    complaint[]
  floor        floor[]
}

model campus {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  map_path String?    @db.VarChar(255)
  building building[]
}

model category {
  id          Int     @id @default(autoincrement())
  library_id  Int
  title       String  @db.VarChar(100)
  description String?
  book        book[]
  library     library @relation(fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model class_attendance {
  id                   Int                     @id @default(autoincrement())
  course_attendance_id Int
  student_id           String                  @db.VarChar(20)
  status               attendance_status_enum? @default(Absent)
  created_at           DateTime                @default(now()) @db.Timestamp(6)
  updated_at           DateTime                @default(now()) @db.Timestamp(6)
  course_attendance    course_attendance       @relation(fields: [course_attendance_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student              student                 @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model class_material {
  id             Int          @id @default(autoincrement())
  section_id     Int
  title          String       @db.VarChar(100)
  content        String?
  recording_path String?      @db.VarChar(255)
  start_date     DateTime?    @db.Timestamp(6)
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @default(now()) @db.Timestamp(6)
  attachment     attachment[]
  section        section      @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model club {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  description       String?
  content           String?
  club_img          String?             @db.VarChar(255)
  owner_id          String              @db.VarChar(20)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  student           student             @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  club_announcement club_announcement[]
  club_member       club_member[]
  club_post         club_post[]
}

model club_announcement {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(100)
  content     String?
  club_id     Int
  member_id   Int
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  club        club        @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  club_member club_member @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model club_member {
  id                Int                 @id @default(autoincrement())
  club_id           Int
  student_id        String              @db.VarChar(20)
  is_admin          Boolean?            @default(false)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  club_announcement club_announcement[]
  club              club                @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student           student             @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  club_post         club_post[]
}

model club_post {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(100)
  content     String?
  club_id     Int
  member_id   Int
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  club        club        @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  club_member club_member @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model complaint {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  content     String?
  user_id     Int
  building_id Int
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  building    building @relation(fields: [building_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model connection {
  id                             Int      @id @default(autoincrement())
  sequence                       Int?
  route_id                       Int
  start_id                       Int
  end_id                         Int
  distance                       Int?
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                     DateTime @default(now()) @db.Timestamp(6)
  stop_connection_end_idTostop   stop     @relation("connection_end_idTostop", fields: [end_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  route                          route    @relation(fields: [route_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stop_connection_start_idTostop stop     @relation("connection_start_idTostop", fields: [start_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course {
  code        String            @id @db.VarChar(20)
  semester_id Int
  program_id  Int
  name        String            @db.VarChar(100)
  description String?
  objective   String?
  credits     Int?
  type        course_type_enum?
  created_at  DateTime          @default(now()) @db.Timestamp(6)
  updated_at  DateTime          @default(now()) @db.Timestamp(6)
  program     program           @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  semester    semester          @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course_announcement {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(100)
  content      String?
  section_id   Int
  professor_id Int
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  professor    professor @relation(fields: [professor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  section      section   @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model course_attendance {
  id               Int                @id @default(autoincrement())
  section_id       Int
  student_id       String             @db.VarChar(20)
  attend_percent   Decimal?           @db.Decimal(5, 2)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  class_attendance class_attendance[]
  section          section            @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student          student            @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model department {
  id         Int        @id @default(autoincrement())
  faculty_id Int?
  name       String     @db.VarChar(100)
  faculty    faculty?   @relation(fields: [faculty_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee   employee[]
  program    program[]
}

model discussion_reply {
  id               Int              @id @default(autoincrement())
  topic_id         Int
  user_id          Int
  content          String?
  create_at        DateTime         @default(now()) @db.Timestamp(6)
  updated_at       DateTime         @default(now()) @db.Timestamp(6)
  discussion_topic discussion_topic @relation(fields: [topic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model discussion_topic {
  id               Int                @id @default(autoincrement())
  section_id       Int
  user_id          Int
  title            String             @db.VarChar(100)
  content          String?
  discussion_img   String?            @db.VarChar(255)
  create_at        DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  discussion_reply discussion_reply[]
  section          section            @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model driver {
  id         Int      @id @default(autoincrement())
  emp_id     String   @db.VarChar(20)
  license_no String   @unique @db.VarChar(50)
  employee   employee @relation(fields: [emp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trip       trip[]
}

model employee {
  id                String       @id @db.VarChar(20)
  firstname         String       @db.VarChar(50)
  midname           String?      @db.VarChar(50)
  lastname          String?      @db.VarChar(50)
  phone             String?      @unique @db.VarChar(20)
  address           String?      @db.VarChar(500)
  date_of_birth     DateTime?    @db.Date
  gender            gender_enum?
  identification_no String?      @unique @db.VarChar(20)
  passport_no       String?      @unique @db.VarChar(20)
  user_id           Int
  dept_id           Int?
  position          String?      @db.VarChar(50)
  job_title         String?      @db.VarChar(50)
  salary            Int?
  bonus             Int?
  created_at        DateTime     @default(now()) @db.Timestamp(6)
  updated_at        DateTime     @default(now()) @db.Timestamp(6)
  advisor           advisor[]
  driver            driver[]
  department        department?  @relation(fields: [dept_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  professor         professor[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model enrollment_detail {
  id              Int                 @id @default(autoincrement())
  head_id         Int
  student_id      String?             @db.VarChar(20)
  section_id      Int
  status          enroll_status_enum? @default(Active)
  progress        Decimal?            @db.Decimal(5, 2)
  grade           grade_enum?
  score           Int?
  created_at      DateTime            @default(now()) @db.Timestamp(6)
  updated_at      DateTime            @default(now()) @db.Timestamp(6)
  enrollment_head enrollment_head     @relation(fields: [head_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  section         section             @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student         student?            @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model enrollment_head {
  id                Int                  @id @default(autoincrement())
  student_id        String               @db.VarChar(20)
  semester_id       Int
  invoice_id        String?              @db.VarChar(50)
  status            payment_status_enum? @default(Unpaid)
  gpa               Decimal?             @db.Decimal(4, 2)
  created_at        DateTime             @default(now()) @db.Timestamp(6)
  updated_at        DateTime             @default(now()) @db.Timestamp(6)
  enrollment_detail enrollment_detail[]
  invoice           invoice?             @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  semester          semester             @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student           student              @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model exam {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(100)
  description    String?
  professor_id   Int
  section_id     Int
  pin            String           @db.VarChar(100)
  vi             String?          @db.VarChar(100)
  start_date     DateTime?        @db.Timestamp(6)
  end_date       DateTime?        @db.Timestamp(6)
  publish_status Boolean?         @default(false)
  view_history   Boolean?         @default(true)
  is_shuffle     Boolean?         @default(false)
  pass_mark      Int?
  full_mark      Int?
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  professor      professor        @relation(fields: [professor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  section        section          @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  exam_question  exam_question[]
  student_answer student_answer[]
  student_exam   student_exam[]
}

model exam_choice {
  id            Int           @id @default(autoincrement())
  question_id   Int
  choice_text   String?
  choice_img    String?       @db.VarChar(255)
  correct_ans   Boolean?      @default(false)
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  exam_question exam_question @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model exam_question {
  id             Int                 @id @default(autoincrement())
  exam_id        Int
  type           question_type_enum?
  title          String
  description    String?
  question_img   String?             @db.VarChar(255)
  mark           Int?                @default(1)
  created_at     DateTime            @default(now()) @db.Timestamp(6)
  updated_at     DateTime            @default(now()) @db.Timestamp(6)
  exam_choice    exam_choice[]
  exam           exam                @relation(fields: [exam_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student_answer student_answer[]
}

model faculty {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  department department[]
  program    program[]
}

model floor {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  building_id Int
  building    building @relation(fields: [building_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room        room[]
}

model guard {
  id                Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(100)
  start_time        DateTime?           @db.Timestamp(6)
  end_time          DateTime?           @db.Timestamp(6)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  guard_reservation guard_reservation[]
}

model guard_reservation {
  id               Int                  @id @default(autoincrement())
  user_id          Int
  guard_id         Int
  description      String?
  status           request_status_enum? @default(Pending)
  reservation_date DateTime?            @db.Date
  start_time       DateTime?            @db.Timestamp(6)
  end_time         DateTime?            @db.Timestamp(6)
  created_at       DateTime             @default(now()) @db.Timestamp(6)
  updated_at       DateTime             @default(now()) @db.Timestamp(6)
  guard            guard                @relation(fields: [guard_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model invoice {
  id              String               @id @db.VarChar(50)
  user_id         Int
  issued_by       String?              @db.VarChar(50)
  issued_date     DateTime?            @db.Timestamp(6)
  due_date        DateTime?            @db.Timestamp(6)
  paid_date       DateTime?            @db.Timestamp(6)
  amount          Decimal?             @db.Decimal(10, 2)
  title           String?              @db.VarChar(100)
  status          payment_status_enum? @default(Unpaid)
  created_at      DateTime             @default(now()) @db.Timestamp(6)
  updated_at      DateTime             @default(now()) @db.Timestamp(6)
  enrollment_head enrollment_head[]
  user            user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model library {
  id                   Int                    @id @default(autoincrement())
  open_time            DateTime?              @db.Time(6)
  close_time           DateTime?              @db.Time(6)
  category             category[]
  library_announcement library_announcement[]
  library_event        library_event[]
  library_request      library_request[]
  library_update       library_update[]
}

model library_announcement {
  id          Int      @id @default(autoincrement())
  library_id  Int
  title       String   @db.VarChar(100)
  description String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  library     library  @relation(fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model library_event {
  id          Int       @id @default(autoincrement())
  library_id  Int
  title       String    @db.VarChar(100)
  description String?
  event_date  DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  library     library   @relation(fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model library_request {
  id         Int      @id @default(autoincrement())
  user_id    Int
  library_id Int
  title      String   @db.VarChar(100)
  edition    Int?
  author     String?  @db.VarChar(100)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  library    library  @relation(fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model library_update {
  id          Int      @id @default(autoincrement())
  library_id  Int
  title       String   @db.VarChar(100)
  description String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  library     library  @relation(fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lost_and_found {
  id                                    Int                     @id @default(autoincrement())
  reporter_id                           Int
  name                                  String                  @db.VarChar(100)
  description                           String?
  found_location                        String?                 @db.VarChar(255)
  status                                lost_found_status_enum?
  owner_id                              Int?
  created_at                            DateTime                @default(now()) @db.Timestamp(6)
  updated_at                            DateTime                @default(now()) @db.Timestamp(6)
  user_lost_and_found_owner_idTouser    user?                   @relation("lost_and_found_owner_idTouser", fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_lost_and_found_reporter_idTouser user                    @relation("lost_and_found_reporter_idTouser", fields: [reporter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model maintenance_request {
  id          Int                    @id @default(autoincrement())
  user_id     Int
  location    String?                @db.VarChar(255)
  type        maintenance_type_enum?
  description String?
  priority    priority_enum?
  status      request_status_enum?   @default(Pending)
  created_at  DateTime               @default(now()) @db.Timestamp(6)
  updated_at  DateTime               @default(now()) @db.Timestamp(6)
  user        user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model parking_building {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  parking_img   String?         @db.VarChar(255)
  capacity      Int?
  parking_floor parking_floor[]
}

model parking_floor {
  id                  Int              @id @default(autoincrement())
  name                String           @db.VarChar(100)
  parking_building_id Int
  capacity            Int?
  parking_building    parking_building @relation(fields: [parking_building_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parking_slot        parking_slot[]
}

model parking_help {
  id         Int      @id @default(autoincrement())
  user_id    Int
  name       String?  @db.VarChar(100)
  email      String?  @db.VarChar(100)
  content    String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model parking_reservation {
  id              Int                  @id @default(autoincrement())
  qrcode_path     String?              @db.VarChar(255)
  car_id          Int
  parking_slot_id Int
  status          parking_status_enum? @default(Reserved)
  created_at      DateTime             @default(now()) @db.Timestamp(6)
  updated_at      DateTime             @default(now()) @db.Timestamp(6)
  verified_car    verified_car         @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parking_slot    parking_slot         @relation(fields: [parking_slot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model parking_slot {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  parking_floor_id    Int
  status              Boolean?              @default(true)
  parking_reservation parking_reservation[]
  parking_floor       parking_floor         @relation(fields: [parking_floor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model professor {
  id                  Int                   @id @default(autoincrement())
  emp_id              String                @db.VarChar(20)
  section_id          Int
  attendance_qr_code  attendance_qr_code[]
  course_announcement course_announcement[]
  exam                exam[]
  employee            employee              @relation(fields: [emp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  section             section               @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model program {
  id           Int                   @id @default(autoincrement())
  dept_id      Int?
  faculty_id   Int?
  name         String                @db.VarChar(100)
  price        Int?
  degree_level education_level_enum?
  duration     Int?
  prefix       String                @unique @db.VarChar(3)
  no_of_course Int?                  @default(1)
  created_at   DateTime              @default(now()) @db.Timestamp(6)
  updated_at   DateTime              @default(now()) @db.Timestamp(6)
  batch        batch[]
  course       course[]
  department   department?           @relation(fields: [dept_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  faculty      faculty?              @relation(fields: [faculty_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student      student[]
}

model query_log {
  id         Int      @id @default(autoincrement())
  user_id    Int
  question   String
  answer     String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model room {
  id           Int            @id @default(autoincrement())
  floor_id     Int
  name         String         @db.VarChar(100)
  capacity     Int?
  location     String?        @db.VarChar(255)
  floor        floor          @relation(fields: [floor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room_booking room_booking[]
  section      section[]
}

model room_booking {
  id           Int       @id @default(autoincrement())
  user_id      Int
  room_id      Int
  booking_date DateTime? @db.Date
  start_time   DateTime? @db.Timestamp(6)
  end_time     DateTime? @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  room         room      @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model route {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(100)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  connection    connection[]
  trip_schedule trip_schedule[]
}

model section {
  id                  Int                   @id @default(autoincrement())
  course_code         String                @db.VarChar(10)
  name                String?               @db.VarChar(100)
  room_id             Int?
  day                 weekday_enum?
  start_time          DateTime?             @db.Time(6)
  end_time            DateTime?             @db.Time(6)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  assignment          assignment[]
  attendance_qr_code  attendance_qr_code[]
  class_material      class_material[]
  course_announcement course_announcement[]
  course_attendance   course_attendance[]
  discussion_topic    discussion_topic[]
  enrollment_detail   enrollment_detail[]
  exam                exam[]
  professor           professor[]
  room                room?                 @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model semester {
  id              Int               @id @default(autoincrement())
  name            String?           @db.VarChar(20)
  start_date      DateTime?         @db.Date
  end_date        DateTime?         @db.Date
  course          course[]
  enrollment_head enrollment_head[]
}

model stop {
  id                                   Int                   @id @default(autoincrement())
  name                                 String                @db.VarChar(100)
  location                             Unsupported("point")?
  created_at                           DateTime              @default(now()) @db.Timestamp(6)
  updated_at                           DateTime              @default(now()) @db.Timestamp(6)
  connection_connection_end_idTostop   connection[]          @relation("connection_end_idTostop")
  connection_connection_start_idTostop connection[]          @relation("connection_start_idTostop")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model student {
  id                    String                  @id @db.VarChar(20)
  firstname             String                  @db.VarChar(50)
  midname               String?                 @db.VarChar(50)
  lastname              String?                 @db.VarChar(50)
  phone                 String?                 @unique @db.VarChar(20)
  address               String?                 @db.VarChar(500)
  date_of_birth         DateTime?               @db.Date
  gender                gender_enum?
  identification_no     String?                 @unique @db.VarChar(20)
  passport_no           String?                 @unique @db.VarChar(20)
  user_id               Int
  program_id            Int
  batch_id              Int?
  gpax                  Decimal?                @db.Decimal(4, 2)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  advisor_request       advisor_request[]
  assignment_submission assignment_submission[]
  class_attendance      class_attendance[]
  club                  club[]
  club_member           club_member[]
  course_attendance     course_attendance[]
  enrollment_detail     enrollment_detail[]
  enrollment_head       enrollment_head[]
  batch                 batch?                  @relation(fields: [batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  program               program                 @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  user                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student_answer        student_answer[]
  student_exam          student_exam[]
}

model student_answer {
  id            Int           @id @default(autoincrement())
  exam_id       Int
  question_id   Int
  student_id    String        @db.VarChar(20)
  answer        String?
  ans_correct   Boolean?      @default(false)
  exam          exam          @relation(fields: [exam_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  exam_question exam_question @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student       student       @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model student_exam {
  id          Int               @id @default(autoincrement())
  exam_id     Int
  student_id  String            @db.VarChar(20)
  status      exam_status_enum? @default(Not_Started)
  is_checked  Boolean?          @default(false)
  total_score Int?
  exam        exam              @relation(fields: [exam_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student     student           @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model trip {
  id            Int             @id @default(autoincrement())
  driver_id     Int
  vehicle_id    Int
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  driver        driver          @relation(fields: [driver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicle       vehicle         @relation(fields: [vehicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trip_schedule trip_schedule[]
}

model trip_booking {
  id               Int                  @id @default(autoincrement())
  user_id          Int
  trip_schedule_id Int
  status           booking_status_enum? @default(Confirm)
  created_at       DateTime             @default(now()) @db.Timestamp(6)
  updated_at       DateTime             @default(now()) @db.Timestamp(6)
  trip_schedule    trip_schedule        @relation(fields: [trip_schedule_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model trip_schedule {
  id           Int            @id @default(autoincrement())
  route_id     Int
  trip_id      Int
  day          weekday_enum?
  start_time   DateTime?      @db.Time(6)
  end_time     DateTime?      @db.Time(6)
  status       Boolean?       @default(false)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  trip_booking trip_booking[]
  route        route          @relation(fields: [route_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trip         trip           @relation(fields: [trip_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                              Int                   @id @default(autoincrement())
  campus_email                                    String                @unique @db.VarChar(100)
  personal_email                                  String?               @db.VarChar(100)
  password                                        String                @db.VarChar(255)
  role                                            role_enum
  is_activated                                    Boolean?              @default(false)
  created_at                                      DateTime              @default(now()) @db.Timestamp(6)
  updated_at                                      DateTime              @default(now()) @db.Timestamp(6)
  no_of_student                                   Int?                  @default(1)
  no_of_employee                                  Int?                  @default(1)
  book_reservation                                book_reservation[]
  complaint                                       complaint[]
  discussion_reply                                discussion_reply[]
  discussion_topic                                discussion_topic[]
  employee                                        employee[]
  guard_reservation                               guard_reservation[]
  invoice                                         invoice[]
  library_request                                 library_request[]
  lost_and_found_lost_and_found_owner_idTouser    lost_and_found[]      @relation("lost_and_found_owner_idTouser")
  lost_and_found_lost_and_found_reporter_idTouser lost_and_found[]      @relation("lost_and_found_reporter_idTouser")
  maintenance_request                             maintenance_request[]
  parking_help                                    parking_help[]
  query_log                                       query_log[]
  room_booking                                    room_booking[]
  student                                         student[]
  trip_booking                                    trip_booking[]
  verified_car                                    verified_car[]
}

model vehicle {
  id              Int      @id @default(autoincrement())
  registration_no String?  @unique @db.VarChar(50)
  capacity        Int?
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  trip            trip[]
}

model verified_car {
  id                  Int                   @id @default(autoincrement())
  user_id             Int
  license_no          String?               @unique @db.VarChar(50)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  parking_reservation parking_reservation[]
  user                user                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum attendance_status_enum {
  Present
  Absent
  Late
  Excuse
}

enum book_reservation_status_enum {
  ReservedIn_Use @map("ReservedIn Use")
  Returned
  Late
  In_Queue       @map("In Queue")
}

enum booking_status_enum {
  Confirm
  Cancelled
  No_Show     @map("No-Show")
  In_Progress @map("In-Progress")
  Complete
}

enum course_type_enum {
  General_Core  @map("General Core")
  Specific
  Free_Elective @map("Free Elective")
}

enum education_level_enum {
  Bachelor_Degree @map("Bachelor Degree")
  Master_Degree   @map("Master Degree")
  Doctoral_Degree @map("Doctoral Degree")
}

enum enroll_status_enum {
  Active
  Withdraw
  Complete
}

enum exam_status_enum {
  Not_Started @map("Not Started")
  In_Progress @map("In Progress")
  Completed
}

enum gender_enum {
  Male
  Female
}

enum grade_enum {
  A
  B_ @map("B+")
  B
  C_ @map("C+")
  C
  D_ @map("D+")
  D
  F
  S
  U
  W
  Fa
}

enum lost_found_status_enum {
  Lost
  Found
  Returned
}

enum maintenance_type_enum {
  Electrical
  Plumbing
  HVAC
  Other
}

enum parking_status_enum {
  Reserved
  Occupied
  Completed
  Cancelled
  Expired
}

enum payment_status_enum {
  Unpaid
  Paid
  Cancelled
}

enum priority_enum {
  High
  Medium
  Low
}

enum question_type_enum {
  Essay
  Multiple_Choice @map("Multiple Choice")
  Checklist
}

enum request_status_enum {
  Pending
  Confirmed
  In_Progress @map("In Progress")
  Completed
  Cancelled
}

enum role_enum {
  Student
  Professor
  Management
  Staff
  Driver
}

enum weekday_enum {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
